name: Update GitHub Pages with URLs
on:
  schedule:
    - cron: "0 * * * *"  # Runs every hour
  workflow_dispatch:

jobs:
  update-pages:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests beautifulsoup4

      - name: Set last updated timestamp in CST timezone
        id: timestamp
        run: |
          export TZ="America/Chicago"
          LAST_UPDATED=$(date +"%B %d, %Y at %I:%M %p %Z")
          echo "LAST_UPDATED=$LAST_UPDATED" >> $GITHUB_ENV
          echo "Generated timestamp: $LAST_UPDATED"

      - name: Fetch and parse webpage into HTML and JSON
        run: |
          python - <<EOF
          import requests
          import re
          import json
          from requests.adapters import HTTPAdapter
          from requests.packages.urllib3.util.retry import Retry
          from bs4 import BeautifulSoup
          from os import environ

          def extract_urls_from_text(text):
              url_pattern = r'https?://[^\s<>"\']+'
              return re.findall(url_pattern, text)

          last_updated = environ.get('LAST_UPDATED')

          url = "https://nirbytes.com/post/1000-proxies-for-school-chromebook-2024"
          headers = {
              "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36"
          }

          session = requests.Session()
          retries = Retry(total=5, backoff_factor=1, status_forcelist=[500, 502, 503, 504])
          session.mount("https://", HTTPAdapter(max_retries=retries))
          response = session.get(url, headers=headers)
          soup = BeautifulSoup(response.content, 'html.parser')

          extracted_data = {}
          html_content = f"""
          <!DOCTYPE html>
          <html lang="en">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>Accurate Link Reachability Checker</title>
              <style>
                  body {{
                      font-family: Arial, sans-serif;
                      margin: 20px;
                  }}
                  h1 {{
                      text-align: center;
                  }}
                  .result {{
                      margin: 10px 0;
                      padding: 10px;
                      border: 1px solid #ccc;
                      border-radius: 5px;
                  }}
                  .success {{
                      color: green;
                  }}
                  .failure {{
                      color: red;
                  }}
                  .title {{
                      font-weight: bold;
                      margin-top: 20px;
                  }}
                  .download-btn {{
                      display: block;
                      width: 200px;
                      margin: 20px auto;
                      padding: 10px;
                      text-align: center;
                      background-color: #66ccff;
                      color: #fff;
                      font-size: 18px;
                      border-radius: 5px;
                      text-decoration: none;
                      transition: background-color 0.3s ease;
                  }}
                  .download-btn:hover {{
                      background-color: #ff9900;
                  }}
              </style>
          </head>
          <body>
              <h1>Accurate Link Reachability Checker</h1>
              <div id="results"></div>
              <!-- Add download button here -->
              <a href="index.html" class="download-btn" download="index.html">Download this page</a>

              <script>
                  fetch('links.json')
                      .then(response => {
                          if (!response.ok) {{
                              throw new Error(`Failed to load links.json: ${{
                                  response.statusText
                              }}`);
                          }}
                          return response.json();
                      }})
                      .then(data => {{
                          const resultsDiv = document.getElementById('results');
                          for (const [title, links] of Object.entries(data)) {{
                              const titleDiv = document.createElement('div');
                              titleDiv.className = 'title';
                              titleDiv.textContent = `Category: ${{
                                  title
                              }}`;
                              resultsDiv.appendChild(titleDiv);
                              links.forEach(link => {{
                                  const resultDiv = document.createElement('div');
                                  resultDiv.className = 'result';
                                  resultDiv.textContent = `Checking: ${{
                                      link
                                  }}`;
                                  resultsDiv.appendChild(resultDiv);

                                  fetch(link, {{ mode: 'no-cors' }})
                                      .then(() => {{
                                          resultDiv.textContent = `${{
                                              link
                                          }} - ✅ Successfully Connected`;
                                          resultDiv.classList.add('success');
                                      }})
                                      .catch(() => {{
                                          resultDiv.textContent = `${{
                                              link
                                          }} - ❌ Failed to Connect`;
                                          resultDiv.classList.add('failure');
                                      }});
                              }});
                          }}
                      }})
                      .catch(error => {{
                          const resultsDiv = document.getElementById('results');
                          resultsDiv.textContent = `Error: ${{
                              error.message
                          }}`;
                      }});
              </script>
          </body>
          </html>
          """

          with open('index.html', 'w', encoding='utf-8') as f:
              f.write(html_content)

          with open('links.json', 'w', encoding='utf-8') as f:
              json.dump(extracted_data, f, indent=4)
          EOF

      - name: Commit and push changes
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add index.html links.json
          git commit -m "Auto-update HTML and JSON with extracted URLs and titles"
          git push
